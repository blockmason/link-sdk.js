version: 2

defaults: &defaults
  working_directory: "/docker/project"
  docker:
  - image: blockmason/nodejs:11.14.0

workflows:
  version: 2
  default:
    jobs:
    - build:
        requires:
        - install
    - style:
        requires:
        - install
    - install:
        requires:
        - initialize
    - initialize
    - test:
        requires:
        - install
    - documentation:
        requires:
        - install
    - publish:
        requires:
        - build
        - style
        - test
        filters:
          branches:
            only:
            - master

jobs:
  publish:
    <<: *defaults
    steps:
    - attach_workspace:
        at: /docker
    - run:
        name: Import PGP key (if available)
        command: |
          if [ -n "${CIRCLE_PGP_KEY}" ]; then
            (echo "${CIRCLE_PGP_KEY}" | base64 --decode) | gpg --allow-secret-key-import --import -
          fi
    - run:
        name: Publishing (only if version has changed)
        command: |
          PACKAGE_VERSION="$(echo 'console.log(require("./package.json").version);' | node)"
          PUBLISH_REPO="$(echo 'console.log(require("./package.json").publishConfig.repository);' | node)"
          PREVIOUS_VERSION="$(git ls-remote --refs --tags "${PUBLISH_REPO}" | sed -E 's|^.+refs/tags/||g' | sort --version-sort | tail -1)"
          if [ "${PACKAGE_VERSION}" != "${PREVIOUS_VERSION}" ]; then
            git clone --verbose "${PUBLISH_REPO}" package
            (cd package; git config user.email "github-circleci@blockmason.io")
            (cd package; git config user.name "CircleCI")
            (cd package; git config user.signingKey "$(gpg --list-secret-keys | grep -E '[0-9A-F]{40}' | tail -1 | xargs)")
            find package -depth -mindepth 1 -maxdepth 1 | grep -v 'package/.git' | xargs rm -vfR
            cp -vfR lib/* package/
            (cd package; git add .)
            (cd package; git commit --gpg-sign --message="v${PACKAGE_VERSION} Release")
            (cd package; git tag --sign --message="v${PACKAGE_VERSION} Release" "${PACKAGE_VERSION}")
            (cd package; git push "${PUBLISH_REPO}" master "${PACKAGE_VERSION}")
          fi
  initialize:
    <<: *defaults
    steps:
    - checkout
    - add_ssh_keys:
        fingerprints:
        - "1f:25:0a:b2:88:ce:a9:ef:00:bc:df:b4:42:49:84:19"
    - persist_to_workspace:
        root: /docker
        paths:
        - .ssh
        - project
  install:
    <<: *defaults
    steps:
    - attach_workspace:
        at: /docker
    - restore_cache:
        keys:
        - v1-{{ checksum ".tool-versions" }}-yarn-lock-{{ checksum "yarn.lock" }}
    - run:
        name: Installing dependencies
        command: |
          yarn install --frozen-lockfile
    - save_cache:
        key: v1-{{ checksum ".tool-versions" }}-yarn-lock-{{ checksum "yarn.lock" }}
        paths:
        - node_modules
    - persist_to_workspace:
        root: /docker
        paths:
        - project/node_modules
  style:
    <<: *defaults
    steps:
    - attach_workspace:
        at: /docker
    - run:
        name: Checking code style
        command: |
          mkdir -vp reports
          yarn --silent lint --format junit --output-file reports/eslint.xml
    - store_test_results:
        path: reports
  test:
    <<: *defaults
    steps:
    - attach_workspace:
        at: /docker
    - run:
        name: Testing
        command: |
          mkdir -vp reports/junit
          yarn --silent test --reporter xunit > reports/junit/test-results.xml
    - store_test_results:
        path: reports/junit
  build:
    <<: *defaults
    steps:
    - attach_workspace:
        at: /docker
    - run:
        name: Building assets for production
        command: |
          NODE_ENV=production yarn build
    - store_artifacts:
        path: lib
    - persist_to_workspace:
        root: /docker
        paths:
        - project/lib
  documentation:
    <<: *defaults
    steps:
    - attach_workspace:
        at: /docker
    - run:
        name: Generating API documentation
        command: |
          yarn --silent documentation
    - store_artifacts:
        path: docs
